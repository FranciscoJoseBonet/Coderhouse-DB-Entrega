<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<title>Products List</title>
<style>
  body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background:#f0f2f5; color: #333; margin: 0; padding: 20px; }
  h1 { text-align: center; color: #2c3e50; margin-bottom: 20px; font-size: 2rem; }
  form { display: flex; flex-wrap: wrap; gap: 10px; justify-content: center; margin-bottom: 30px; }
  input, select, button { padding: 8px 12px; border-radius: 6px; border: 1px solid #ccc; }
  button { cursor: pointer; background-color: #3498db; color: white; border: none; transition: background 0.2s; }
  button:hover { background-color: #2980b9; }
  ul { list-style: none; padding: 0; margin: 0; }
  li { background: #ffffff; padding: 20px; margin-bottom: 15px; border-radius: 12px; box-shadow: 0 6px 15px rgba(0, 0, 0, 0.08); display: flex; flex-direction: column; gap: 6px; transition: transform 0.2s, box-shadow 0.2s, background 0.2s; }
  li:hover { transform: translateY(-2px); box-shadow: 0 10px 20px rgba(0, 0, 0, 0.12); background: #f9fcff; }
  li .title { font-weight: 600; font-size: 1.2rem; color: #34495e; }
  li .description { color: #555; font-size: 0.95rem; }
  li .meta { font-size: 0.85rem; color: #7f8c8d; display: flex; flex-wrap: wrap; gap: 10px; }
  li .price { color: #27ae60; font-weight: 700; }
  p { text-align: center; color: #7f8c8d; font-style: italic; margin-top: 20px; font-size: 1rem; }
  .pagination { text-align: center; margin-top: 25px; display: flex; justify-content: center; gap: 10px; }
  .pagination a { padding: 8px 12px; border-radius: 6px; border: 1px solid #3498db; color: #3498db; text-decoration: none; font-weight: 600; transition: background 0.2s, color 0.2s; }
  .pagination a:hover { background: #3498db; color: white; }

  #cartModal { display:none; position:fixed; top:0; left:0; width:100%; height:100%; background:rgba(0,0,0,0.5); justify-content:center; align-items:center; }
  #cartModal .modal-content { background:white; padding:20px; border-radius:10px; min-width:300px; }
  #cartModal label { display:block; margin-top:10px; margin-bottom:5px; }
  #cartModal input, #cartModal select { width:100%; padding:6px; border-radius:6px; border:1px solid #ccc; margin-bottom:10px; }
  #cartModal button { padding:6px 12px; border-radius:6px; border:none; cursor:pointer; }
  #cartModal #btnConfirm { background:#27ae60; color:white; }
  #cartModal #btnCancel { background:#c0392b; color:white; margin-right:5px; }
</style>
</head>
<body>

<h1>Products List</h1>

<form method="get" action="/api/products">
  <input type="text" name="query" placeholder="Category" value="{{filters.query}}">
  <input type="number" name="minPrice" placeholder="Min Price" value="{{filters.minPrice}}">
  <input type="number" name="maxPrice" placeholder="Max Price" value="{{filters.maxPrice}}">
  <select name="sort">
    <option value="">Sort By</option>
    <option value="asc" {{#ifEquals filters.sort "asc"}}selected{{/ifEquals}}>Price Ascending</option>
    <option value="desc" {{#ifEquals filters.sort "desc"}}selected{{/ifEquals}}>Price Descending</option>
  </select>
  <button type="submit">Filter</button>
</form>

{{#if products.length}}
<ul>
  {{#each products}}
  <li data-product-id="{{this._id}}" data-stock="{{this.stock}}">
    <div class="title">{{this.title}}</div>
    <div class="description">{{this.description}}</div>
    <div class="meta">
      <span class="price">${{this.price}}</span>
      — <small>ID: {{this._id}}</small>
      — <small>Code: {{this.code}}</small>
      — <small>Stock: {{this.stock}}</small>
      — <small>Category: {{this.category}}</small>
    </div>
    <button class="btn-add-cart" style="margin-top:10px;">Agregar al carrito</button>
  </li>
  {{/each}}
</ul>

<div class="pagination">
  {{#if (gt page 1)}}
    <a href="?page={{subtract page 1}}&query={{filters.query}}&minPrice={{filters.minPrice}}&maxPrice={{filters.maxPrice}}&sort={{filters.sort}}">
      Previous
    </a>
  {{/if}}
  <span>Page {{page}} of {{totalPages}}</span>
  {{#if (lt page totalPages)}}
    <a href="?page={{add page 1}}&query={{filters.query}}&minPrice={{filters.minPrice}}&maxPrice={{filters.maxPrice}}&sort={{filters.sort}}">
      Next
    </a>
  {{/if}}
</div>

{{else}}
<p>No products available.</p>
{{/if}}


<div id="cartModal">
  <div class="modal-content">
    <h3>Agregar producto al carrito</h3>
    <label>Seleccionar carrito:</label>
    <select id="selectCart"></select>
    <label>Cantidad:</label>
    <input type="number" id="inputQuantity" min="1" value="1">
    <div style="display:flex; justify-content:flex-end;">
      <button id="btnCancel">Cancelar</button>
      <button id="btnConfirm">Agregar</button>
    </div>
    <p id="modalError" style="color:red; margin-top:10px;"></p>
  </div>
</div>

<script>
document.addEventListener("DOMContentLoaded", () => {
  const modal = document.getElementById("cartModal");
  const selectCart = document.getElementById("selectCart");
  const inputQuantity = document.getElementById("inputQuantity");
  const btnCancel = document.getElementById("btnCancel");
  const btnConfirm = document.getElementById("btnConfirm");
  const modalError = document.getElementById("modalError");

  let currentProductId = null;
  let currentStock = 0;

fetch("/api/carts/all-json")
  .then(res => res.json())
  .then(data => {
    carts = data;
    if(carts.length === 0) {
      selectCart.innerHTML = "<option disabled>No hay carritos disponibles</option>";
    } else {
      selectCart.innerHTML = carts.map(c => `<option value="${c._id}">Carrito ${c._id}</option>`).join("");
    }
  });

  document.querySelectorAll(".btn-add-cart").forEach(btn => {
    btn.addEventListener("click", (e) => {
      const li = e.target.closest("li");
      currentProductId = li.dataset.productId;
      currentStock = Number(li.dataset.stock);
      inputQuantity.value = 1;
      modalError.textContent = "";
      modal.style.display = "flex";
    });
  });

  btnCancel.addEventListener("click", () => {
    modal.style.display = "none";
  });

  btnConfirm.addEventListener("click", () => {
    const quantity = Number(inputQuantity.value);
    const cartId = selectCart.value;

    if(quantity < 1) {
      modalError.textContent = "La cantidad debe ser mayor a 0";
      return;
    }

    if(quantity > currentStock) {
      modalError.textContent = `No hay suficiente stock. Stock disponible: ${currentStock}`;
      return;
    }

    fetch(`/api/carts/${cartId}/product/${currentProductId}`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ quantity })
    })
    .then(res => res.json())
    .then(data => {
      modal.style.display = "none";
      alert("Producto agregado al carrito correctamente");
	  location.reload();
    })
    .catch(err => {
      modalError.textContent = "Error al agregar al carrito";
      console.error(err);
    });
  });
});
</script>

</body>
</html>
